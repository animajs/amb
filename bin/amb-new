#!/usr/bin/env node
'use strict';

var path = require('path');
var fs = require('fs');
var program = require('commander');
var gulp = require('gulp');
var template = require('gulp-template');
var chalk = require('chalk');
var tildify = require('tildify');
var log = require('../lib/log');

program
  .usage('PROJECT_PATH')
  .option('-t, --template <template>', 'select target template')
  .parse(process.argv);

var projPath = program.args[0];
var projName = path.basename(projPath);
if (!projPath) {
  return program.help();
}

var tmplName = program.template || 'default';
var tmplDir = path.join(__dirname, '../lib/template/new/' + tmplName);
if (!fs.existsSync(tmplDir)) {
  log.error('error', 'template %s is not valid', chalk.white.bold(tmplName));
  return;
}

if (projPath[0] != '/') {
  projPath = path.join(process.cwd(), projPath);
}

if (fs.existsSync(projPath)) {
  log.error('error', ' %s is existed.', chalk.white.bold(tildify(projPath)));
  return;
}

log.header('Generating new project: %s', chalk.green(projName));

gulp.src(path.join(tmplDir, '**'))

  // template
  .pipe(template({
    projName: projName
  }))

  // copy
  .pipe(gulp.dest(projPath))

  // console outputs
  .on('data', function(file) {
    if (!fs.statSync(file.path).isFile()) return;
    log.info('creating', file.relative);
  })
  .on('end', function() {
    // console.log(chalk.green('Done'));
  });
