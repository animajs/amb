#!/usr/bin/env node
'use strict';

var program = require('commander');
var build = require('../lib/build');
var gulp = require('gulp');
var getConfig = require('../lib/config').get;
var _ = require('lodash');
var log = require('../lib/log');
var file = require('spm').sdk.file;

var p = file.readJSON('package.json');
if (!p || !p.spm) {
  log.error('miss', 'package.json or "spm" key');
  process.exit(1);
}

program
  .option('-w, --watch', 'watch for file changes and rebuild automatically')
  .option('-s, --standalone <name>', 'build a standalone, UMD-wrapped version of the component with the given global name')
  .option('-p, --publish', 'build for publish')
  .parse(process.argv);

var opt = _.extend(getConfig(), {
  standalone: program.standalone,
  publish: program.publish,
  include: 'all'
});

buildWrap(function() {
  if (!opt.watch) return;
  log.header('watch', 'enabled');

  var timer;
  gulp.watch(opt.watch, function(e) {
    log.header('file changed', e.path);
    timer && clearTimeout(timer);
    timer = setTimeout(buildWrap, 500);
  });
});

function buildWrap(cb) {
  var begin = new Date();
  var _gulp = new gulp.Gulp();

  _gulp.task('prepare', function() {
    begin = new Date();
  });

  build(opt, _gulp, function(err) {
    if (err) {
      log.error('error', err.message);
      log.debug('error', err.stack);
    } else {
      log.info('finish', showDiff(begin));
    }
  });

  cb && cb();
}

function showDiff(time) {
  var diff = Date.now() - time;
  return (' (' + diff + 'ms)').to.gray.color;
}
