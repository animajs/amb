#!/usr/bin/env node
'use strict';

var debug = require('debug')('amb:build');
var program = require('commander');
var path = require('path');
var EventProxy = require('eventproxy');
var Package = require('father').SpmPackage;
var buildFile = require('../lib/build-file');
var gulp = require('gulp');
var chalk = require('chalk');

program
  .usage('PROJECT_PATH')
  .option('-w, --watch', 'watch for file changes and rebuild automatically')
  .option('-s, --standalone <name>', 'build a standalone, UMD-wrapped version of the component with the given global name')
  .parse(process.argv);

if (program.watch) {
  console.log(chalk.underline('Start watching...'));
  gulp.watch('src/**/*.+(html|css|js|coffee|less)', function() {
    build();
  });
}
build();


function build() {
  var pkg = require(path.join(process.cwd(), './package'));
  if (!pkg || !pkg.spm) {
    console.error('error: spm should be in package.json');
    return;
  }

  var files = pkg.spm.output;
  var cssjsfiles = [];
  var htmlfiles = [];
  files.forEach(function(file) {
    var isHTMLFile = /\.html$/.test(file);
    if (isHTMLFile) {
      htmlfiles.push(file);
    } else {
      cssjsfiles.push(file);
    }
  });

  console.log(chalk.white.bold('Building Project'));
  debug('building css, js');
  buildFiles(cssjsfiles, function() {
    debug('building html');
    buildFiles(htmlfiles);
  });
}

function buildFiles(files, cb) {
  var ep = new EventProxy();
  ep.after('build', files.length, function() {
    cb && cb();
  });

  files.forEach(function build(file) {
    var start = new Date();
    var opts = {
      dest: './dist/',
      pkg: new Package(process.cwd()),
      standalone: program.standalone
    };
    buildFile(file, opts, function(destFile) {
      console.log('build: %s in %s ms', chalk.green(destFile), new Date() - start);
      ep.emit('build');
    });
  });
}
