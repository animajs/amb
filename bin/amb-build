#!/usr/bin/env node
'use strict';

var debug = require('debug')('amb:build');
var program = require('commander');
var path = require('path');
var EventProxy = require('eventproxy');
var Package = require('father').SpmPackage;
var buildFile = require('../lib/build').buildFile;
var buildImg = require('../lib/build').buildImg;
var gulp = require('gulp');
var chalk = require('chalk');
var getConfig = require('../lib/config').get;
var _ = require('lodash');
var util = require('../lib/util');

program
  .option('-w, --watch', 'watch for file changes and rebuild automatically')
  .option('-s, --standalone <name>', 'build a standalone, UMD-wrapped version of the component with the given global name')
  .option('-p, --publish', 'build for publish')
  .parse(process.argv);

run();
if (program.watch) {
  console.log(chalk.underline('Start watching...'));
  gulp.watch('src/**/*.+(html|css|js|coffee|less)', function() {
    run();
  });
}


//////////////////////
// Methods.

function run() {
  // build opt
  var spm = require(path.join(process.cwd(), './package')).spm;
  var opt = getConfig();
  opt.pkg = new Package(process.cwd());
  if (program.standalone) opt.standalone = program.standalone;
  if (program.publish) opt.publish = program.publish;

  // filter html and jscss
  var files = spm.output;
  var cssjsfiles = [];
  var htmlfiles = [];
  files.forEach(function(file) {
    if (util.isHTMLFile(file)) {
      htmlfiles.push(file);
    }
    else if (util.isCSSFile(file) || util.isJSFile(file)) {
      cssjsfiles.push(file);
    }
  });

  console.log(chalk.white.bold('Building Project'));

  // build: img -> css, js -> html
  buildImg(opt, function() {
    buildFiles(cssjsfiles, opt, function() {
      buildFiles(htmlfiles, opt);
    });
  });
}

function buildFiles(files, opt, cb) {
  var ep = new EventProxy();
  ep.after('build', files.length, function() {
    cb && cb(null);
  });

  files.forEach(function build(file) {
    var start = new Date();
    buildFile(file, opt, function() {
      console.log('build: %s in %s ms', chalk.green(opt.dest + path.basename(file)), new Date() - start);
      ep.emit('build');
    });
  });
}
