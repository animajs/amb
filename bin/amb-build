#!/usr/bin/env node
'use strict';

var debug = require('debug')('amb:build');
var program = require('commander');
var path = require('path');
var EventProxy = require('eventproxy');
var Package = require('umi').Package;
var build = require('../lib/build');
var gulp = require('gulp');
var chalk = require('chalk');
var getConfig = require('../lib/config').get;
var _ = require('lodash');
var util = require('../lib/util');
var log = require('../lib/log');
var spm = require('spm');
var file = spm.sdk.file;

var p = file.readJSON('package.json');
if (!p || !p.spm) {
  log.error('miss', 'package.json or "spm" key');
  process.exit(1);
}

program
  .option('-w, --watch', 'watch for file changes and rebuild automatically')
  .option('-s, --standalone <name>', 'build a standalone, UMD-wrapped version of the component with the given global name')
  .option('-p, --publish', 'build for publish')
  .parse(process.argv);

var opt = _.extend(getConfig(), {
  standalone: program.standalone,
  publish: program.publish,
  include: 'all'
});

var begin = new Date();

gulp.task('prepare', function() {
  begin = new Date();
});

build(opt, function(err) {
  if (err) {
    log.error('error', err.message);
    log.debug('error', err.stack);
  } else {
    log.info('finish', showDiff(begin));
  }
});


//////////////////////
// Methods.

function run(cb) {
  // filter html and jscss
  var files = require(path.join(process.cwd(), './package')).spm.output;
  var cssjsfiles = [];
  var htmlfiles = [];
  files.forEach(function(file) {
    if (util.isHTMLFile(file)) {
      htmlfiles.push(file);
    }
    else if (util.isCSSFile(file) || util.isJSFile(file)) {
      cssjsfiles.push(file);
    }
  });

  log.header('build');

  // build: spm install -> img -> css, js -> html
  log.info('spm', 'installing dependencies');
  spm.install({
    source: opt['spm_source'],
    query: []
  }, function() {
    log.info('start', 'build img');
    buildImg(opt, function() {
      log.info('start', 'build css and js');
      buildFiles(cssjsfiles, opt, function() {
        log.info('start', 'build html');
        buildFiles(htmlfiles, opt, cb);
      });
    });
  })
}

function showDiff(time) {
  var diff = Date.now() - time;
  return (' (' + diff + 'ms)').to.gray.color;
}
